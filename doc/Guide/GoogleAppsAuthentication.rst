##########################
Google Apps Authentication
##########################

The Google Apps authority allows you to authenticate users in your Google Apps Domain. Because it is
a limited access system, it is well suited to control access to modules to people in your organization.

Google Apps uses *OAuth*. Instead of authenticating directly to Google, 
the user gets redirected to the Google Apps login page. Then they must authenticate and then 
authorize access to the application. Your application has no access to the user's login or password.

This authority also has the ability through OAuth to access protected data in your google apps domain.
(Only for paid Google Apps for Business or Google Apps for Education accounts).
This allows you to use Kurogo to display your domain's calendars, documents or other protected files
in the mobile browser. This is handled without requiring you to divulge sensitive usernames or passwords.
All access is handled through revokable keys. Implementations for accessing calendar and other data
is forthcoming.

=============
Configuration
=============

To configure authentication, you only need to add a few parameters:

* *USER_LOGIN* - Should be set to *LINK*
* *GOOGLEAPPS_DOMAIN* - should be set to your Google Apps domain (example.com)

To allow access to domain data (like calendars)

* *OAUTH_CONSUMER_KEY* - Consumer key provided by google (typically your domain example.com)
* *OAUTH_CONSUMER_SECRET* - Consumer secret provided by google (see below on how to obtain this value)


============
How it Works
============

OpenID systems work by redirecting the user to an authentication page hosted by the service. The 
application sends a series of values including a URL callback with the request. Once the request 
is complete, the service redirects back to the callback URL and the user is logged in. 

The callback URL is generated by Kurogo based on the domain of server you are connecting to. Google
*requires* that the callback url must be in the same domain (or subdomain) as your Google Apps domain.
This presents a problem during development since many developers will use *localhost* to test their 
applications while coding. The best way to combat this is to edit your *hosts* file that allows you to 
create static DNS->IP mappings. Most unix systems will have this file located at */etc/hosts*. 
You should edit this file by adding a test subdomain entry that maps to 127.0.0.1 (which is localhost). 
For instance:

  127.0.0.1     dev.example.com

Now, instead of testing your site using localhost, you would direct your browser to *dev.example.com* (or
whatever your domain is). You can also include the port if your server is listening on a port other
than 80. Thus when Google redirects back to *dev.example.com* your computer will use the local
ip address of 127.0.0.1. 

=============================
Accessing Domain data (Alpha)
=============================

Google Apps for Business and Education have the ability to perform retrieval of domain data using *OAuth*.
This includes retrieving calendars and other data from your organization's users. This feature, however
is not automatically enabled. To enable this feature, you must enable *2-legged OAuth access control*.

* Log into your domain's administration panel (you must be an administrator for your domain to accomplish this task)

  * Go to http://google.com/a
  * Click sign in.
  * Enter your domain and choose Domain Management. 
  * Log in with a domain administrator's account

* Click on the *Advanced tools* section of the domain management application
* In the authentication section choose *Manage OAuth domain key*
* In the OAuth consumer key section, ensure that *Enable this consumer key* is selected
* Take note of the consumer key and consumer secret
* In the *Two-legged OAuth access control* section, ensure that *Allow access to all APIs is selected*

This permits Kurogo to use the consumer key and secret to retrieve data for your organization. It is VERY
important to keep this consumer secret in a protected location. If it has been compromised, you can click
*Regenerate OAuth consumer secret*.

Once you have this data you can utilize the features of the :doc:`Calendar Module <modulecalendar>` and
enable user calendars
